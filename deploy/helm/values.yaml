# Default values for movie-analyzer
# This values.yaml file contains simplified parameterized configurations
# Database: Uses external AWS RDS PostgreSQL
# Sentiment Analysis: Uses AWS Lambda (serverless)

global:
  namespace: movie-analyzer

# Backend configuration - Lambda Integration
backend:
  name: backend
  replicaCount: 1
  
  image:
    repository: artisantek/movie-analyzer
    tag: backend-lambda
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "500m"
    limits:
      memory: "1Gi"
      cpu: "1000m"
  
  env:
    # Database connection - Configure these to point to your AWS RDS instance
    # DB_HOST should be your RDS endpoint (e.g., movie-db.xxxxx.region.rds.amazonaws.com)
    DB_HOST: "movie-analyzer-db.cnku6m4wm4rj.ap-south-1.rds.amazonaws.com"
    DB_PORT: "5432"
    DB_NAME: "moviereviews"
    SERVER_PORT: "8080"
    
    # Lambda Configuration for Sentiment Analysis
    MODEL_SERVER_MODE: "lambda"
    LAMBDA_FUNCTION_NAME: "movie-analyzer-sentiment"
    AWS_REGION: "ap-south-1"
    LAMBDA_AUTH_METHOD: "iam"  # Options: iam (IAM roles), keys (access keys)
  
  # Service Account for IAM Roles for Service Accounts (IRSA)
  # Only created when using IAM authentication method
  serviceAccount:
    create: true  # Set to false if using keys authentication
    name: backend-sa
    annotations:
      # Replace with your actual IAM role ARN when using IAM method
      eks.amazonaws.com/role-arn: "arn:aws:iam::879381264703:role/eks-lambda-role"
  
  probes:
    readiness:
      path: /actuator/health
      port: 8080
      initialDelaySeconds: 10
      periodSeconds: 10
    liveness:
      path: /actuator/health
      port: 8080
      initialDelaySeconds: 15
      periodSeconds: 10
  
  secret:
    # Base64 encoded values for RDS database credentials
    # Update these with your actual RDS username and password
    DB_USERNAME: bW92aWV1c2Vy  # movieuser (base64)
    DB_PASSWORD: bW92aWVwYXNz  # moviepass (base64)
    
    # AWS Credentials (only if not using IRSA)
    # Uncomment and configure if not using IAM roles
    # AWS_ACCESS_KEY_ID: ""
    # AWS_SECRET_ACCESS_KEY: ""

# Frontend configuration
frontend:
  name: frontend
  replicaCount: 1
  
  image:
    repository: artisantek/movie-analyzer
    tag: frontend
    pullPolicy: IfNotPresent
  
  service:
    type: NodePort
    port: 3000
    targetPort: 3000
    nodePort: 30000
  
  resources:
    requests:
      memory: "256Mi"
      cpu: "250m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  
  env:
    BACKEND_API_URL: "http://backend:8080"
  
  probes:
    readiness:
      path: /health
      port: 3000
      initialDelaySeconds: 5
      periodSeconds: 5
    liveness:
      path: /health
      port: 3000
      initialDelaySeconds: 10
      periodSeconds: 10

# Ingress configuration (optional)
ingress:
  enabled: true
  # Ingress type: "alb" for AWS ALB or "nginx" for NGINX ingress controller
  type: alb  # Options: alb, nginx
  host: movie.artisantek.in
  className: alb  # Will be set to "alb" automatically when type is "alb"
  
  # ALB specific configuration
  alb:
    scheme: internet-facing
    targetType: ip
    certificateArn: arn:aws:acm:ap-south-1:879381264703:certificate/3f86f23b-ac0c-4bf2-9b4c-946e9517ccd6
    groupName: shared-alb
    groupOrder: '10'
  
  # TLS configuration (mainly for NGINX ingress)
  tls:
    enabled: false
    secretName: movie-tls-secret
  
  # Custom annotations (will be added in addition to the default ones based on type)
  customAnnotations: {}
    # Example:
    # cert-manager.io/cluster-issuer: letsencrypt-prod
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"