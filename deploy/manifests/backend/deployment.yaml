---
# Backend Deployment - Lambda Integration
# Database: Uses external AWS RDS PostgreSQL
# Sentiment Analysis: Uses AWS Lambda (serverless)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: movie-analyzer
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      # Service account for IAM role (IRSA)
      serviceAccountName: backend-sa
      containers:
      - name: backend
        image: artisantek/movie-analyzer:backend
        ports:
        - containerPort: 8080
        env:
        # Database connection - Configure these to point to your AWS RDS instance
        # Update DB_HOST with your RDS endpoint
        - name: DB_HOST
          value: "your-rds-endpoint.region.rds.amazonaws.com"
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: "moviereviews"
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: DB_PASSWORD
        
        # Lambda Configuration for Sentiment Analysis
        - name: MODEL_SERVER_MODE
          value: "lambda"
        - name: LAMBDA_FUNCTION_NAME
          value: "movie-analyzer-sentiment"
        - name: AWS_REGION
          value: "ap-south-1"
        - name: LAMBDA_AUTH_METHOD
          value: "iam"
        
        # AWS Credentials (only if not using IRSA)
        # - name: AWS_ACCESS_KEY_ID
        #   valueFrom:
        #     secretKeyRef:
        #       name: aws-credentials
        #       key: AWS_ACCESS_KEY_ID
        # - name: AWS_SECRET_ACCESS_KEY
        #   valueFrom:
        #     secretKeyRef:
        #       name: aws-credentials
        #       key: AWS_SECRET_ACCESS_KEY
        
        - name: SERVER_PORT
          value: "8080"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10